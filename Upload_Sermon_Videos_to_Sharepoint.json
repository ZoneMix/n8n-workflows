{
  "nodes": [
    {
      "parameters": {},
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [
        -128,
        192
      ],
      "id": "cc67417a-9c70-43af-8689-549d036c3d0a",
      "name": "When clicking ‘Execute workflow’"
    },
    {
      "parameters": {
        "command": "=curl -u :tk_TOKEN -d \"Uploaded all Sermon Videos to SharePoint\" https://ntfy.example.com/TOPIC"
      },
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        544,
        144
      ],
      "id": "aec5d0a3-4d7b-4f16-bcc8-4407bd500033",
      "name": "Push Notification to Ntfy"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "038a4e3d-fab2-40d9-9452-f0ef346d14cd",
              "name": "stdout",
              "value": "={{ $json.stdout }}",
              "type": "object"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        768,
        144
      ],
      "id": "7d125da6-e257-4eb8-b188-918dae7c7d71",
      "name": "Change stdout to Object"
    },
    {
      "parameters": {
        "command": "=echo -n {{ $json.stdout.topic }} | sha256sum | cut -d ' ' -f1"
      },
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        992,
        144
      ],
      "id": "31b5785e-41a2-4422-8395-90d36351426a",
      "name": "Create SHA256 Hash of Topic"
    },
    {
      "parameters": {
        "command": "=curl -X POST -H \"X-Poll-ID: {{ $('Change stdout to Object').item.json.stdout.id }}\" https://ntfy.sh/{{ $json.stdout }}"
      },
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        1216,
        144
      ],
      "id": "4a7f940d-ccb2-4cf8-a487-a53a130656be",
      "name": "Instant Notification to iOS"
    },
    {
      "parameters": {
        "resource": "playlistItem",
        "operation": "getAll",
        "playlistId": "PLAYLIST_ID",
        "returnAll": true,
        "options": {}
      },
      "type": "n8n-nodes-base.youTube",
      "typeVersion": 1,
      "position": [
        96,
        288
      ],
      "id": "172adeaa-1f53-4cbc-b80d-c0ff466a271c",
      "name": "Get all Sermon Objects",
      "credentials": {
        "youTubeOAuth2Api": {
          "id": "y5Vxsu2dISMYnKrO",
          "name": "YouTube account"
        }
      }
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        320,
        288
      ],
      "id": "43445fd6-c8a9-42d4-a7e3-a0f996a23b3d",
      "name": "Loop Sermon Objects"
    },
    {
      "parameters": {
        "jsCode": "const items = $input.all();\nconst result = [];\n\nfor (const item of items) {\n  let fileName = item.json.snippet.title;\n  fileName = fileName.replaceAll(':','_');\n  fileName = fileName.replaceAll('?','');\n\n  result.push({\n    json: {\n      ...item.json,\n      fileName: fileName\n    }\n  });\n}\n\nreturn result;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        544,
        -48
      ],
      "id": "1ab54e94-6b9c-4646-a63c-9e1662446852",
      "name": "Create Sermon Filename"
    },
    {
      "parameters": {
        "workflowId": {
          "__rl": true,
          "value": "koZ28b7PZsvtUxhe",
          "mode": "list",
          "cachedResultName": "Microsoft Graph API Token Refresh"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {},
          "matchingColumns": [],
          "schema": [],
          "attemptToConvertTypes": false,
          "convertFieldsToString": true
        },
        "options": {}
      },
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1.2,
      "position": [
        768,
        -48
      ],
      "id": "fa93dc19-a905-48bc-9ff4-e253b29b3941",
      "name": "Refresh Graph API Token"
    },
    {
      "parameters": {
        "url": "=https://graph.microsoft.com/v1.0/sites/SHAREPOINT_SITE_ID/drive/root:/FILE_PATH/{{ $('Create Sermon Filename').item.json.fileName }}.mp4",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "=Bearer {{ $json.body.access_token }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        992,
        -48
      ],
      "id": "c94e7c29-22a5-4476-8408-f2da8936a22a",
      "name": "Check if Sermon File Exists in SharePoint",
      "alwaysOutputData": true,
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "command": "=yt-dlp -t mp4 -o \"/tmp/%(id)s.%(ext)s\" --embed-thumbnail --embed-metadata --write-subs --sub-lang en https://www.youtube.com/watch?v={{ $('Create Sermon Filename').item.json.contentDetails.videoId }}"
      },
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        1216,
        -48
      ],
      "id": "151d46a9-67bb-499b-ac9b-9ec7181bd8f5",
      "name": "Download Sermon Video Locally"
    },
    {
      "parameters": {
        "url": "https://graph.microsoft.com/v1.0/sites/SHAREPOINT_SITE_SUBDOMAIN:/sites/SITE_NAME",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "=Bearer {{ $('Refresh Graph API Token').item.json.body.access_token }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1664,
        -48
      ],
      "id": "66515b97-7748-4614-9a95-dc4e72a568ae",
      "name": "Get SharePoint Site ID"
    },
    {
      "parameters": {
        "jsCode": "const items = $input.all();\nconst result = [];\n\nfor (const item of items) {\n  const siteId = item.json.id; // e.g., \"yourcompany.sharepoint.com,guid1,guid2\"\n  if (!siteId) {\n    throw new Error(\"Site ID not found in input\");\n  }\n\n  // Split the site ID into an array\n  const idParts = siteId.split(\",\");\n\n  // Create output with all parts and optionally specific ones\n  result.push({\n    json: {\n      hostname: idParts[0],           // e.g., \"yourcompany.sharepoint.com\"\n      siteCollectionId: idParts[1],   // First GUID\n      siteId: idParts[2],             // Second GUID\n    }\n  });\n}\n\nreturn result;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1888,
        -48
      ],
      "id": "4b5f937f-2719-41ff-bd4b-37215f2c020d",
      "name": "Create SharePoint Site ID Object"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=https://graph.microsoft.com/v1.0/sites/{{ $json.siteCollectionId }}/drive/items/DRIVE_ITEM_ID:/{{ $('Create Sermon Filename').item.json.fileName }}.mp4:/createUploadSession",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "=Bearer {{ $('Refresh Graph API Token').item.json.body.access_token }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        2112,
        -48
      ],
      "id": "e458916b-1131-4a78-b430-6033cd62583f",
      "name": "Create Sermon Upload Session"
    },
    {
      "parameters": {
        "jsCode": "const https = require('https');\nconst url = require('url'); // For parsing URLs\nconst fs = require('fs');\n\nasync function httpRequest(options, body = null) {\n  return new Promise((resolve, reject) => {\n    const req = https.request(options, (res) => {\n      let data = '';\n      res.on('data', (chunk) => data += chunk);\n      res.on('end', () => {\n        console.log(`Response for bytes ${options.headers['Content-Range']}: Status ${res.statusCode}`);\n        if (res.statusCode >= 400) {\n          reject(new Error(`HTTP ${res.statusCode}: ${data}`));\n        }\n        resolve({\n          status: res.statusCode,\n          body: data ? JSON.parse(data) : {}\n        });\n      });\n    });\n\n    req.on('error', (err) => reject(new Error(`Request failed: ${err.message}`)));\n\n    if (body) {\n      if (typeof body === 'string') {\n        req.write(body);\n        req.end();\n      } else {\n        body.pipe(req);\n        body.on('end', () => req.end());\n        body.on('error', (err) => reject(new Error(`Stream error: ${err.message}`)));\n      }\n    } else {\n      req.end();\n    }\n  });\n}\n\nconst localFilePath = '/tmp/' + $('Create Sermon Filename').first().json.contentDetails.videoId + '.mp4';\nconst uploadUrl = $input.first().json.uploadUrl;\n\nconst stats = fs.statSync(localFilePath);\nconst totalSize = stats.size;\nconst chunkSize = 5 * 1024 * 1024; // 5 MB, multiple of 320 KiB\n\nlet offset = 0;\nlet uploadedBytes = 0;\nlet driveItem = null;\n\nconsole.log(`Starting upload. Total size: ${totalSize} bytes, uploadUrl: ${uploadUrl}`);\n\n// Parse uploadUrl using url module\nconst uploadUrlParsed = url.parse(uploadUrl);\nif (!uploadUrlParsed.hostname || !uploadUrlParsed.pathname) {\n  throw new Error(`Invalid uploadUrl: ${uploadUrl}`);\n}\n\nconst baseOptions = {\n  hostname: uploadUrlParsed.hostname,\n  path: uploadUrlParsed.pathname + (uploadUrlParsed.search || ''),\n  method: 'PUT'\n};\n\nwhile (true) {\n  const start = offset;\n  if (start >= totalSize) {\n    break;\n  }\n  const end = Math.min(start + chunkSize - 1, totalSize - 1);\n  const chunkLength = end - start + 1;\n  const readStream = fs.createReadStream(localFilePath, { start, end }); // end is inclusive\n\n  const uploadOptions = {\n    ...baseOptions,\n    headers: {\n      'Content-Range': `bytes ${start}-${end}/${totalSize}`,\n      'Content-Length': chunkLength\n    }\n  };\n\n  console.log(`Uploading chunk: ${uploadOptions.headers['Content-Range']}, Host: ${uploadOptions.hostname}, Path: ${uploadOptions.path}`);\n\n  try {\n    const { status, body } = await httpRequest(uploadOptions, readStream);\n    uploadedBytes += chunkLength;\n    console.log(`Successfully uploaded chunk: bytes ${start}-${end}/${totalSize}, status: ${status}`);\n\n    if (status === 201 || status === 200) {\n      driveItem = body;\n      break;\n    } else if (status === 202) {\n      if (!body.nextExpectedRanges || body.nextExpectedRanges.length === 0) {\n        // Upload complete, but no driveItem? Unlikely, but break\n        break;\n      } else {\n        const rangeStr = body.nextExpectedRanges[0];\n        const parts = rangeStr.split('-');\n        offset = parseInt(parts[0]);\n        let maxEnd = totalSize - 1;\n        if (parts[1] && parts[1] !== '') {\n          maxEnd = parseInt(parts[1]) - 1;\n        }\n        // In the next iteration, end will be min(start + chunkSize - 1, totalSize - 1)\n        // But to respect maxEnd:\n        if (offset > maxEnd) {\n          break;\n        }\n      }\n    } else {\n      throw new Error(`Unexpected status code: ${status}`);\n    }\n  } catch (err) {\n    throw new Error(`Chunk upload failed at bytes ${start}-${end}: ${err.message}`);\n  }\n}\n\nconst result = [{\n  json: {\n    success: true,\n    message: `File uploaded successfully. Total bytes: ${uploadedBytes}`,\n    driveItem: driveItem || {}\n  }\n}];\n\nreturn result;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2336,
        -48
      ],
      "id": "4ee554a7-7ff7-4fe5-b8ab-3442ceab69c7",
      "name": "Upload Sermon Video in Chunks"
    },
    {
      "parameters": {
        "command": "=rm /tmp/{{ $('Get all Sermon Objects').item.json.contentDetails.videoId }}.mp4"
      },
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        2560,
        128
      ],
      "id": "0187d34f-a22f-4636-95a8-287df6794967",
      "name": "Delete Local Sermon Video",
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "bc288842-4ee6-4443-9fdb-1579b37e7a73",
              "leftValue": "={{ $json.exitCode }}",
              "rightValue": 0,
              "operator": {
                "type": "number",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        1440,
        -48
      ],
      "id": "d55ca2df-14c5-46a3-a6ef-80304c4b1cbd",
      "name": "If Deleted Video, Loop, Else, Continue"
    },
    {
      "parameters": {
        "inputSource": "passthrough"
      },
      "type": "n8n-nodes-base.executeWorkflowTrigger",
      "typeVersion": 1.1,
      "position": [
        -128,
        384
      ],
      "id": "46cc45ca-3b2b-4599-9d35-398bd9c0b4d3",
      "name": "When Executed by Another Workflow"
    }
  ],
  "connections": {
    "When clicking ‘Execute workflow’": {
      "main": [
        [
          {
            "node": "Get all Sermon Objects",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Push Notification to Ntfy": {
      "main": [
        [
          {
            "node": "Change stdout to Object",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Change stdout to Object": {
      "main": [
        [
          {
            "node": "Create SHA256 Hash of Topic",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create SHA256 Hash of Topic": {
      "main": [
        [
          {
            "node": "Instant Notification to iOS",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get all Sermon Objects": {
      "main": [
        [
          {
            "node": "Loop Sermon Objects",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Sermon Objects": {
      "main": [
        [
          {
            "node": "Push Notification to Ntfy",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Create Sermon Filename",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create Sermon Filename": {
      "main": [
        [
          {
            "node": "Refresh Graph API Token",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Refresh Graph API Token": {
      "main": [
        [
          {
            "node": "Check if Sermon File Exists in SharePoint",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check if Sermon File Exists in SharePoint": {
      "main": [
        [
          {
            "node": "Loop Sermon Objects",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Download Sermon Video Locally",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Download Sermon Video Locally": {
      "main": [
        [
          {
            "node": "If Deleted Video, Loop, Else, Continue",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get SharePoint Site ID": {
      "main": [
        [
          {
            "node": "Create SharePoint Site ID Object",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create SharePoint Site ID Object": {
      "main": [
        [
          {
            "node": "Create Sermon Upload Session",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create Sermon Upload Session": {
      "main": [
        [
          {
            "node": "Upload Sermon Video in Chunks",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Upload Sermon Video in Chunks": {
      "main": [
        [
          {
            "node": "Delete Local Sermon Video",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Delete Local Sermon Video": {
      "main": [
        [
          {
            "node": "Loop Sermon Objects",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If Deleted Video, Loop, Else, Continue": {
      "main": [
        [
          {
            "node": "Get SharePoint Site ID",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Loop Sermon Objects",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "When Executed by Another Workflow": {
      "main": [
        [
          {
            "node": "Get all Sermon Objects",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "5c2ee72a0e88923bc637975f09b9bf63e684e7277868acf88bb223cf6cdac4ef"
  }
}
