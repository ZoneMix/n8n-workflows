{
  "nodes": [
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "bc288842-4ee6-4443-9fdb-1579b37e7a73",
              "leftValue": "={{ $json.exitCode }}",
              "rightValue": 0,
              "operator": {
                "type": "number",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        1440,
        -80
      ],
      "id": "7d834943-da52-433f-9e12-27b66ceea7a2",
      "name": "If Deleted Video, Loop, Else, Continue"
    },
    {
      "parameters": {
        "fileSelector": "=/tmp/{{ $('Get Sermons').item.json.contentDetails.videoId }}.mp3",
        "options": {}
      },
      "type": "n8n-nodes-base.readWriteFile",
      "typeVersion": 1,
      "position": [
        1664,
        -80
      ],
      "id": "ee99bb0f-0dba-4a01-8e6a-e7b5fc38148d",
      "name": "Read/Write Files from Disk"
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {}
          ]
        }
      },
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.2,
      "position": [
        -128,
        256
      ],
      "id": "6e9f503c-8319-42b3-b47e-ba227b742e8f",
      "name": "Schedule Trigger"
    },
    {
      "parameters": {
        "jsCode": "const items = $input.all();\nconst result = [];\n\nfor (const item of items) {\n  let fileName = item.json.snippet.title;\n  fileName = fileName.replaceAll(':','_');\n  fileName = fileName.replaceAll('?','');\n  let videoId = item.json.contentDetails.videoId;\n\n  result.push({\n    json: {\n      fileName: fileName,\n      videoId: videoId\n    }\n  });\n}\n\nreturn result;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        544,
        -80
      ],
      "id": "f1778a51-7468-4be1-8af3-14c3c3071f10",
      "name": "Parse Object"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        320,
        256
      ],
      "id": "9316f710-2db3-4334-9e67-d7d2c7cf21bf",
      "name": "Loop Objects"
    },
    {
      "parameters": {
        "resource": "playlistItem",
        "operation": "getAll",
        "playlistId": "PLQTZ0tgdpaMTKJ7ll2EGJo2wB5r1Nk7o-",
        "returnAll": true,
        "options": {}
      },
      "type": "n8n-nodes-base.youTube",
      "typeVersion": 1,
      "position": [
        96,
        256
      ],
      "id": "a4a862a3-e3be-4dd0-8b36-e81ad8cff7ed",
      "name": "Get Sermons",
      "credentials": {
        "youTubeOAuth2Api": {
          "id": "y5Vxsu2dISMYnKrO",
          "name": "YouTube account"
        }
      }
    },
    {
      "parameters": {
        "workflowId": {
          "__rl": true,
          "value": "mTFh8Bp4N7hrB9G6",
          "mode": "list",
          "cachedResultName": "Push to Ntfy"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {
            "message": "=S3 Audio Execution Complete – {{ $now.format('yyyy-MM-dd | t') }}"
          },
          "matchingColumns": [
            "message"
          ],
          "schema": [
            {
              "id": "message",
              "displayName": "message",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string",
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": true
        },
        "options": {}
      },
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1.2,
      "position": [
        544,
        112
      ],
      "id": "4db4fba1-7c98-4d06-b034-2f57749b7061",
      "name": "Ntfy – End"
    },
    {
      "parameters": {
        "workflowId": {
          "__rl": true,
          "value": "9jnWLGeQN5qW9zs2",
          "mode": "list",
          "cachedResultName": "Message to Discord Webhook"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {
            "message": "=S3 Audio Execution Complete – {{ $now.format('yyyy-MM-dd | t') }}"
          },
          "matchingColumns": [
            "message"
          ],
          "schema": [
            {
              "id": "message",
              "displayName": "message",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string",
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": true
        },
        "options": {}
      },
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1.2,
      "position": [
        768,
        112
      ],
      "id": "e3842525-bb97-43b7-9648-c8ad15df5eb2",
      "name": "Discord Webhook – End"
    },
    {
      "parameters": {
        "command": "=rm /tmp/{{ $('Parse Object').item.json.videoId }}.mp3"
      },
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        2112,
        96
      ],
      "id": "7883dfd5-e7e5-4365-a5ac-aec8fd458374",
      "name": "Delete Local File",
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "operation": "upload",
        "bucketName": "S3_BUCKET_NAME",
        "fileName": "={{ $('Parse Object').item.json.fileName }}.mp3",
        "additionalFields": {
          "parentFolderKey": "audio"
        }
      },
      "type": "n8n-nodes-base.awsS3",
      "typeVersion": 2,
      "position": [
        1888,
        -80
      ],
      "id": "5fd325ad-60d9-49a4-bae7-fbcb88450dd9",
      "name": "Upload File to S3",
      "credentials": {
        "aws": {
          "id": "O4ogNrakmPtUp2Ad",
          "name": "AWS account"
        }
      }
    },
    {
      "parameters": {
        "command": "=curl \"https://S3_BUCKET_NAME.s3.us-east-1.amazonaws.com/AUDIO_FILE_PATH/{{ encodeURIComponent($('Parse Object').item.json.fileName) }}.mp3\" -I -s | head -n1 | cut -d ' ' -f2"
      },
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        768,
        -80
      ],
      "id": "d208aefc-f9c3-4970-aeb0-e514d2ecbc2d",
      "name": "Check if File Exists in S3"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "2b850256-5af7-48bf-807d-82390c8b2749",
              "leftValue": "={{ $json.stdout }}",
              "rightValue": "200",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        992,
        -80
      ],
      "id": "bcdfa61b-12c4-4aca-92bc-b6e78163e59a",
      "name": "Upload Audio if False",
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "command": "=yt-dlp -t mp3 -o \"/tmp/%(id)s.%(ext)s\" --embed-thumbnail --embed-metadata https://www.youtube.com/watch?v={{ $('Parse Object').item.json.videoId }}"
      },
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        1216,
        -80
      ],
      "id": "a813a63a-e08f-4f92-920a-1c432c8c942d",
      "name": "Download Video/Audio Locally",
      "retryOnFail": true,
      "waitBetweenTries": 5000
    }
  ],
  "connections": {
    "If Deleted Video, Loop, Else, Continue": {
      "main": [
        [
          {
            "node": "Read/Write Files from Disk",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Loop Objects",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Read/Write Files from Disk": {
      "main": [
        [
          {
            "node": "Upload File to S3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Schedule Trigger": {
      "main": [
        [
          {
            "node": "Get Sermons",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parse Object": {
      "main": [
        [
          {
            "node": "Check if File Exists in S3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Objects": {
      "main": [
        [
          {
            "node": "Ntfy – End",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Parse Object",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Sermons": {
      "main": [
        [
          {
            "node": "Loop Objects",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Ntfy – End": {
      "main": [
        [
          {
            "node": "Discord Webhook – End",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Delete Local File": {
      "main": [
        [
          {
            "node": "Loop Objects",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Upload File to S3": {
      "main": [
        [
          {
            "node": "Delete Local File",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check if File Exists in S3": {
      "main": [
        [
          {
            "node": "Upload Audio if False",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Upload Audio if False": {
      "main": [
        [
          {
            "node": "Loop Objects",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Download Video/Audio Locally",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Download Video/Audio Locally": {
      "main": [
        [
          {
            "node": "If Deleted Video, Loop, Else, Continue",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "5c2ee72a0e88923bc637975f09b9bf63e684e7277868acf88bb223cf6cdac4ef"
  }
}
